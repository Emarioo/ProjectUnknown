#include "Visual.h"

#include <Windows.h>

Font* font1;

// Game Menu
IWindow iWin;

ISquare sBack;
IButton bLogin;
IButton bSingle;
IButton bMulti;
IInput iUser;
IInput iKey;

// Chat
IInput iChat;
bool chatMode;
int chatActive=60*10;
void UpdateChat() {
	chatActive = 60 * 10;
}
bool GetChatMode() {
	return chatMode;
}
int maxMsg=10;
int msgHeight=25;
std::vector<Text> chatMessages;
void NewMessage(std::string msg) {
	bool createNew=true;
	for (int i = 0; i < chatMessages.size(); i++) {
		if (chatMessages[i].ypos<Height()-maxMsg*msgHeight) {
			chatMessages[i].SetPosY(Height() - 75);
			chatMessages[i].SetText(msg);
			createNew = false;
		} else {
			chatMessages[i].SetPosY(chatMessages[i].ypos-msgHeight);
		}
	}
	if (createNew) {
		chatMessages.push_back(Text());
		chatMessages[chatMessages.size() - 1].Setup(10, Height()-75, 60, font1, 26);
		chatMessages[chatMessages.size() - 1].SetText(msg);
		chatMessages[chatMessages.size() - 1].SetCol(0.3, 0.3, 0.3, 1);
	}
}

// Game Escape
ISquare sFading;
IButton bSettings;
IButton bLeave;
IButton bQuit;


// Gameplay?
bool escMode=true;
bool escMode2=true;
bool GetEscMode() {
	return escMode;
}
Camera* camera;
glm::mat4 projMatrix;
Renderer renderer;

// Initialization
void InitVisual() {
	renderer.Init();

	projMatrix = glm::perspective(glm::radians(90.0f), ((float)Width() / Height()), 0.1f, 400.0f);

	glfwSetKeyCallback(renderer.window, KeyCallback);
	glfwSetMouseButtonCallback(renderer.window, MouseCallback);
	glfwSetCursorPosCallback(renderer.window, CursorCallback);
	glfwSetWindowFocusCallback(renderer.window, WindowFocusCallback);

	// Gui Init
	font1 = new Font("assets/fonts/verdana38");

	iWin.IAddWin("LOGIN");
	iWin.IAddWin("START");
	iWin.IAddWin("SINGLE");
	iWin.IAddWin("MULTI");
	iWin.IAddWin("GAMEPLAY");
	iWin.IAddWin("ESCAPE");

	renderer.AddTexture("squ_back", "assets/textures/squ_back");
	sBack.SetTex("squ_back");
	sBack.SetDim(0, 0, Width(), Height());
	sBack.AddWin("LOGIN");
	sBack.AddWin("START");

	renderer.AddTexture("inp_user", "assets/textures/inp_user");
	iUser.SetTex("inp_user");
	iUser.SetDim(Width()/2-300,200,600,125);
	iUser.AddWin("LOGIN");
	iUser.text.Setup(Width() / 2 - 140, iUser.y + 42,20,font1,44);
	iUser.text.SetText("Emarioo");
	iUser.text.SetCol(0, 0, 0.9, 1);

	renderer.AddTexture("inp_key", "assets/textures/inp_key");
	iKey.SetTex("inp_key");
	iKey.SetDim(Width() / 2 - 300,iUser.y+iUser.h+50,600,125);
	iKey.AddWin("LOGIN");
	iKey.text.Setup(Width()/2-190,iKey.y+42,20,font1,44);
	iKey.text.SetText("ak29t");
	iKey.text.SetCol(0.2, 0, 0.9, 1);

	renderer.AddTexture("but_login", "assets/textures/but_login");
	bLogin.SetTex("but_login");
	bLogin.SetDim(Width()/2-100,iKey.y+iKey.h+50,200,100);
	bLogin.AddWin("LOGIN");

	renderer.AddTexture("but_single", "assets/textures/but_single");
	bSingle.SetTex("but_single");
	bSingle.SetDim(Width() / 2 - 300-100,350,300,150);
	bSingle.AddWin("START");

	renderer.AddTexture("but_multi", "assets/textures/but_multi");
	bMulti.SetTex("but_multi");
	bMulti.SetDim(Width()/2+100,350,300,150);
	bMulti.AddWin("START");

	// Chat
	iChat.SetTex(0.4,0.4,0.4,0.4);
	iChat.SetDim(10, Height()-50, Width()-20, 40);
	iChat.AddWin("GAMEPLAY");
	iChat.text.Setup(15, iChat.y, 60, font1, 40);
	iChat.text.SetText("");
	iChat.text.SetCol(1, 1, 1, 1);
	
	// Inventory
	sFading.SetTex(0.4,0.3,0.2,0);
	sFading.SetDim(0,0,Width(),Height());
	sFading.AddWin("ESCAPE");
	sFading.SetFade("GAMEPLAY","ESCAPE",60);
	sFading.SetFade("ESCAPE","GAMEPLAY",60);
}

// Rendering Controller
std::vector<GameObject*> texRender;
std::vector<GameObject*> colorRender;
void AddRenderO(std::string s,GameObject* o) {
	if (s=="tex") {
		texRender.push_back(o);
	}else if (s == "color") {
		colorRender.push_back(o);
	}
}
void DelRenderO(std::string s,GameObject* o) {
	if (s == "tex") {
		for (int i = 0; i < texRender.size(); i++) {
			if (texRender[i] == o) {
				texRender.erase(texRender.begin() + i);
				break;
			}
		}
	} else if (s == "color") {
		for (int i = 0; i < colorRender.size(); i++) {
			if (colorRender[i] == o) {
				colorRender.erase(colorRender.begin() + i);
				break;
			}
		}
	}
}
void ClearRender(std::string s) {
	if (s == "tex") {
		texRender.clear();
	} else if (s == "color") {
		colorRender.clear();
	}
}
void DrawVisual(Dimension* dim) {
	// Game
	renderer.SwitchBlendDepth(false);
	renderer.BindShader("tex");
	for (GameObject* o : texRender){
		o->Draw();
	}
	renderer.BindShader("color");
	for (GameObject* o : colorRender) {
		o->Draw();
	}

	/*
	renderer.GameTerrain.Bind();
	renderer.Transform(glm::mat4(1));
	dim->terrain.Draw();
	*/

	// GUI
	renderer.SwitchBlendDepth(true);
	renderer.BindShader("gui");



	if (chatMode) {
		iChat.Draw();
	}
	if(iWin.IAtWin("GAMEPLAY")){
		if(chatActive>0)
			chatActive--;
		if (chatMode || chatActive>0) {
			for (int i = 0; i < chatMessages.size();i++) {
				chatMessages[i].DrawString();
			}
		}
	} 
	sBack.Draw();
	
	iUser.Draw();
	iKey.Draw();
	bLogin.Draw();
		
	bSingle.Draw();
	bMulti.Draw();
}

// Camera movement
bool hasFocus = true;
bool HasFocus() {
	return hasFocus;
}
void SetEscMode(bool f) {
	if (escMode != f) {
		int now = ShowCursor(f);
		escMode = f;
		escMode2 = f;
	}
}
void WindowFocusCallback(GLFWwindow* window, int focus) {
	//std::cout << "Focus " << focus << std::endl;
	hasFocus = focus;
	if (!hasFocus) {
		SetEscMode(true);
	}
}

void SetCamera(Camera* cam) {
	camera = cam;
}
void UpdateCamera() {
	glm::mat4 trans = glm::translate(glm::mat4(1.0f), camera->position) *
		glm::rotate(glm::mat4(1.0f), camera->rotation.y, glm::vec3(0, 1, 0))*
		glm::rotate(glm::mat4(1.0f), camera->rotation.x, glm::vec3(1, 0, 0));
	//std::cout << camera->rotation.x << " " << camera->rotation.y << " " << camera->rotation.z << std::endl;
	renderer.BindShader("tex");
	renderer.Projection("tex",projMatrix * glm::inverse(trans));
	renderer.BindShader("color");
	renderer.Projection("color",projMatrix * glm::inverse(trans));
}
std::string KEY = "ak29t";
double mouseX = 0, mouseY = 0;

void KeyCallback(GLFWwindow* window, int key, int scancode, int action, int mods) {
	if (action == 1) {
		//std::cout << "Key " << key << " " << GetChar(key, 0, 0) << std::endl;
	}
	if (iWin.IAtWin("GAMEPLAY")) {
		if (chatMode) {
			iChat.KeyPress(key, action);
			if (action == 1) {
				if (key == GLFW_KEY_ESCAPE) {
					iChat.ClearKey();
					chatMode = false;
				} else if (key == GLFW_KEY_ENTER) {
					// Execute code
					std::string msg = iChat.text.text;
					if (msg[0] == CHAT_CMD_CHAR()) {
						ChatExecuteCommand(msg.substr(1));
					} else {
						NewMessage(msg);
						UpdateChat();
					}
					iChat.ClearKey();
					chatMode = false;
				}
			}
		} else {
			if (action == 1) {
				if (key == GLFW_KEY_ESCAPE) {
					SetEscMode(true);
				} else if (key == GLFW_KEY_ENTER) {
					chatMode = true;
				}
			}
		}
	} else {
		IInput* input = nullptr;
		if (iUser.writing) {
			input = &iUser;
		} else if (iKey.writing) {
			input = &iKey;
		}
		if (input != nullptr) {
			input->KeyPress(key, action);
		}
	}
}
void MouseCallback(GLFWwindow* window,int button, int action, int mods) {
	//std::cout << "MButton " << button << " " << action << " " << mods << std::endl;
	if (iWin.IAtWin("GAMEPLAY")) {
		SetEscMode(false);
	} else {
		if (button==0&&action) {
			iKey.writing = false;
			iUser.writing = false;
			if (iWin.IAtWin("LOGIN")) {
				if (bLogin.Clicked(mouseX,mouseY)) {
					bool user=true;
					bool key=true;
					if(iUser.text.text.length()==1){
						user = false;
					}
					if (iKey.text.text!=KEY) {
						key = false;
					}
					if (!user && !key) {
						std::cout << "NAME CANNOT BE EMPTY AND KEY IS WRONG" << std::endl;;
					} else if (user&&!key) {
						std::cout << "KEY IS INCORRECT" << std::endl;
					} else if (!user&&key) {
						std::cout << "NAME CANNOT BE EMPTY" << std::endl;
					} else {
						std::cout << "LOGIN" << std::endl;
						iWin.ISetWin("PLAY");
					}
				} else if (iUser.Clicked(mouseX, mouseY)) {
					std::cout << "Clicked USER" << std::endl;
					iUser.writing = true;
				} else if (iKey.Clicked(mouseX, mouseY)) {
					std::cout << "Clicked KEY" << std::endl;
					iKey.writing = true;
				}
			} else if (iWin.IAtWin("PLAY")) {
				if (bSingle.Clicked(mouseX, mouseY)) {
					std::cout << "Single" << std::endl;
					iWin.IAtWin("PLAY")
					iWindow = GAMEPLAY;
				} else if (bMulti.Clicked(mouseX, mouseY)) {
					std::cout << "Multi" << std::endl;
					iWindow = GAMEPLAY;
				}
			}
		}
	}
}
void CursorCallback(GLFWwindow* window, double mx, double my) {
	//std::cout << "Mouse " << mx << " " << my << std::endl;
	mouseX = mx;
	mouseY = my;
	bLogin.SetTex(1, 1, 1, 1);
	bSingle.SetTex(1, 1, 1, 1);
	bMulti.SetTex(1, 1, 1, 1);
	if (iWindow == GAMEPLAY) {
		if (!escMode) {
			if (escMode2) {
				float dx = mx - Width() / 2.f;
				float dy = my - Height() / 2.f;

				camera->rotation.y -= dx * (3.14159f / 180)*0.1;
				camera->rotation.x -= dy * (3.14159f / 180)*0.1;
			}
			int wx = 0;
			int wy = 0;
			glfwGetWindowPos(renderer.window, &wx, &wy);
			SetCursorPos(wx + Width() / 2, wy + Height() / 2);
			escMode2=true;
		}
	}
	else {
		if (iWindow == LOGIN) {
			if (bLogin.Inside(mouseX, mouseY)) {
				bLogin.SetTex(1.5, 1.5, 1.5, 1);
			}
		} else if (iWindow == PLAY) {
			if (bSingle.Inside(mouseX, mouseY)) {
				bSingle.SetTex(0.6, 0.6, 0.6, 1);
			} else if (bMulti.Inside(mouseX, mouseY)) {
				bMulti.SetTex(0.6, 0.6, 0.6, 1);
			}
		} else if (iWindow == SINGLE) {

		} else if (iWindow == MULTI) {

		}
	}
}