#include "Visual.h"

#include "Gui/SelectionItem.h"

#include <Windows.h>

Font* font1;

// Game Menu
//IWindow iWin;
int gameStage;// 0 = login, 1 = selection, 2 = gameplay

ISquare sBack;
IButton bLogin;
IInput iUser;
IInput iKey;
/*
// Selection
int selectStage=0;
ISquare selMulti;
ISquare selMultiBack;
IButton selMultiAdd;
std::vector<IButton> serverButttons;
std::vector<SelectionItem> serverData;

ISquare selSingle;
ISquare selSingleBack;
IButton selSingleAdd;
std::vector<IButton> worldButtons;
std::vector<SelectionItem> worldData;

ISquare selMidBack;
IInput selMidTop;
IInput selMidPass;
IInput selMidInfo;// Changes size
IButton selMidJoin;
IButton selMidJoin2;
IButton selMidBot;
*/
// Chat
IInput iChat;
bool chatMode;
int chatActive=60*10;
void UpdateChat() {
	chatActive = 60 * 10;
}
bool GetChatMode() {
	return chatMode;
}
void SetChatMode(bool f) {
	chatMode = f;
}
int maxMsg=10;
int msgHeight=25;
std::vector<Text> chatMessages;
void NewMessage(std::string msg) {
	bool createNew=true;
	for (int i = 0; i < chatMessages.size(); i++) {
		if (chatMessages[i].ypos<Height()-maxMsg*msgHeight) {
			chatMessages[i].SetPosY(Height() - 75);
			chatMessages[i].SetText(msg);
			createNew = false;
		} else {
			chatMessages[i].SetPosY(chatMessages[i].ypos-msgHeight);
		}
	}
	if (createNew) {
		chatMessages.push_back(Text());
		chatMessages[chatMessages.size() - 1].Setup(10, Height()-75,false, 60, font1, 26);
		chatMessages[chatMessages.size() - 1].SetText(msg);
		chatMessages[chatMessages.size() - 1].SetCol(0.3, 0.3, 0.3, 1);
	}
}

// Pause
ISquare pauseFading;

IButton pauseSettings;
IButton pauseLeave;
IButton pauseQuit;

// Settings
IButton settingsFullscreen;
// Shadow Toggle?

// Gameplay
bool RenderGame = false;
bool cursorMode=true;
void SetCursorMode(bool f) {
	if (cursorMode != f) {
		if (f) {
			glfwSetInputMode(GetWindow(), GLFW_CURSOR, GLFW_CURSOR_NORMAL);
			if (glfwRawMouseMotionSupported()) {
				glfwSetInputMode(GetWindow(), GLFW_RAW_MOUSE_MOTION, GLFW_FALSE);
			}
		} else {
			glfwSetInputMode(GetWindow(), GLFW_CURSOR, GLFW_CURSOR_DISABLED);
			if (glfwRawMouseMotionSupported()) {
				glfwSetInputMode(GetWindow(), GLFW_RAW_MOUSE_MOTION, GLFW_TRUE);
			}
		}
		cursorMode = f;
	}
}
void SetPauseMode(bool f) {
	if (f) {
		iWin.ISetWin("ESCAPE");
		SetCursorMode(true);
	} else {
		iWin.ISetWin("GAMEPLAY");
		SetCursorMode(false);
	}
}
bool GetCursorMode() {
	return cursorMode;
}

// Camera movement
double mouseX = 0, mouseY = 0;
bool hasFocus = true;
bool HasFocus() {
	return hasFocus;
}
std::string KEY = "ak29t";
/*
@Unfocus window
*/
void WindowFocusCallback(GLFWwindow* window, int focus) {
	//std::cout << "Focus " << focus << std::endl;
	hasFocus = focus;
	if (!hasFocus) {
		SetPauseMode(true);
	}
}
void KeyCallback(GLFWwindow* window, int key, int scancode, int action, int mods) {
	if (action == 1) {
		//std::cout << "Key " << key << " " << GetChar(key, 0, 0) << std::endl;
	}
	if (iWin.IAtWin("ESCAPE")) {
		if (action == 1) {
			if (key == GLFW_KEY_ESCAPE) {
				SetPauseMode(false);
			}
		}
	} else if (iWin.IAtWin("GAMEPLAY")) {
		if (chatMode) {
			if (iChat.KeyPress(key, action)) {
				if (action == 1) {
					if (key == GLFW_KEY_ESCAPE) {
						iChat.ClearKey();
						SetChatMode(false);
						SetPauseMode(true);
					} else if (key == GLFW_KEY_ENTER) {
						// Execute code
						std::string msg = iChat.text.text;
						if (msg[0] == CHAT_CMD_CHAR()) {
							ChatExecuteCommand(msg.substr(1));
						} else {
							NewMessage(msg);
							UpdateChat();
						}
						iChat.ClearKey();
						chatMode = false;
					}
				}
			}
		} else {
			if (action == 1) {
				if (key == GLFW_KEY_ESCAPE) {
					SetPauseMode(true);
				} else if (key == GLFW_KEY_ENTER) {
					SetChatMode(true);
				}
			}
		}
	}
	/*
	IInput* input = nullptr;
	if (iUser.IsWriting) {
		input = &iUser;
	} else if (iKey.IsWriting) {
		input = &iKey;
	}
	if (input != nullptr) {
		input->KeyPress(key, action);
	}*/
}
void MouseCallback(GLFWwindow* window, int button, int action, int mods) {
	//std::cout << "MButton " << button << " " << action << " " << mods << std::endl;
	if (iWin.IAtWin("GAMEPLAY")) {
		/*if (action == 1) {
			SetEscMode(false);
		}*/
	} else if (iWin.IAtWin("ESCAPE")) {
		if (action == 1) {
			if (pauseSettings.Clicked(mouseX, mouseY)) {
				std::cout << "Settings Menu..." << std::endl;
				SetFullscreen(!IsFullscreen());
			} else if (pauseLeave.Clicked(mouseX, mouseY)) {
				std::cout << "Leave Action..." << std::endl;
			} else if (pauseQuit.Clicked(mouseX, mouseY)) {
				std::cout << "Quit Action..." << std::endl;
			} else {
				SetPauseMode(false);
			}
		}
	} else if (iWin.IAtWin("SELECTION")){
		/*
		if (button == 0 && action==1) {
			if (selMultiAdd.Clicked(mouseX, mouseY)) {

			} else {
				// Loop server buttons
			}
		}*/
		/*
		if (button == 0 && action) {
			iKey.IsWriting = false;
			iUser.IsWriting = false;
			if (bLogin.Clicked(mouseX, mouseY)) {
				bool user = true;
				bool key = true;
				if (iUser.text.text.length() == 1) {
					user = false;
				}
				if (iKey.text.text != KEY) {
					key = false;
				}
				if (!user && !key) {
					std::cout << "NAME CANNOT BE EMPTY AND KEY IS WRONG" << std::endl;;
				} else if (user && !key) {
					std::cout << "KEY IS INCORRECT" << std::endl;
				} else if (!user&&key) {
					std::cout << "NAME CANNOT BE EMPTY" << std::endl;
				} else {
					std::cout << "LOGIN" << std::endl;
					iWin.ISetWin("START");
				}
			} else if (iUser.Clicked(mouseX, mouseY)) {
				std::cout << "Clicked USER" << std::endl;
				iUser.IsWriting = true;
			} else if (iKey.Clicked(mouseX, mouseY)) {
				std::cout << "Clicked KEY" << std::endl;
				iKey.IsWriting = true;
			} else if (bSingle.Clicked(mouseX, mouseY)) {
				std::cout << "Single" << std::endl;
				iWin.ISetWin("GAMEPLAY");
				SetCursorMode(false);
				RenderGame = true;
			} else if (bMulti.Clicked(mouseX, mouseY)) {
				std::cout << "Multi" << std::endl;
				iWin.ISetWin("GAMEPLAY");
				SetCursorMode(false);
				RenderGame = true;
			}
		}*/
	}
}
void MouseMovement(float mx,float my) {
	if (!cursorMode) {
		GetCamera()->rotation.y -= (mx - mouseX) * (3.14159f / 360)*0.18;
		GetCamera()->rotation.x -= (my - mouseY) * (3.14159f / 360)*0.18;
	}
}
void CursorCallback(GLFWwindow* window, double mx, double my) {
	//std::cout << "Mouse " << mx << " " << my << std::endl;
	if (iWin.IAtWin("GAMEPLAY")) {
		MouseMovement(mx,my);
		mouseX = mx;
		mouseY = my;
	} else {
		mouseX = mx;
		mouseY = my;
		bLogin.SetTex(1, 1, 1, 1);
		//bSingle.SetTex(1, 1, 1, 1);
		//bMulti.SetTex(1, 1, 1, 1);
		if (bLogin.Inside(mouseX, mouseY)) {
			bLogin.SetTex(1.5, 1.5, 1.5, 1);
		}/* else if (bSingle.Inside(mouseX, mouseY)) {
			bSingle.SetTex(0.6, 0.6, 0.6, 1);
		} else if (bMulti.Inside(mouseX, mouseY)) {
			bMulti.SetTex(0.6, 0.6, 0.6, 1);
		}*/
	}
}
void ResizeCallback(GLFWwindow* window, int width, int height) {
	SetWinSize(width, height);
	glViewport(0,0,width,height);
	if (width > 0 && height > 0) {
		SetProjection((float)width/height);
		DrawVisual(nullptr);
	}
}
void SetCallbacks() {
	glfwSetWindowSizeCallback(GetWindow(), ResizeCallback);
	glfwSetKeyCallback(GetWindow(), KeyCallback);
	glfwSetMouseButtonCallback(GetWindow(), MouseCallback);
	glfwSetCursorPosCallback(GetWindow(), CursorCallback);
	glfwSetWindowFocusCallback(GetWindow(), WindowFocusCallback);
}
// Initialization
void InitVisual() {
	SetCallbacks();

	// Gui Init
	font1 = new Font("assets/fonts/verdana38");
	iWin.IAddWin("LOGIN");
	iWin.IAddWin("SELECTION");
	iWin.IAddWin("SELADDSERVER");
	iWin.IAddWin("SELEDITSERVER");
	iWin.IAddWin("SELADDWORLD");
	iWin.IAddWin("SELEDITWORLD");
	iWin.IAddWin("GAMEPLAY");
	iWin.IAddWin("ESCAPE");

	// Start
	iWin.ISetWin("SELECTION");
	//iWin.ISetWin("ESCAPE");
	//iWin.ISetWin("GAMEPLAY");
	RenderGame = true;

	AddTexture("squ_back", "assets/textures/squ_back");
	sBack.SetTex("squ_back");
	sBack.SetDim(-1, -1, 2, 2);
	sBack.AddWin("LOGIN");
	sBack.AddWin("SELECTION");
	sBack.AddWin("SELADDSERVER");
	sBack.AddWin("SELEDITSERVER");
	sBack.AddWin("SELADDWORLD");
	sBack.AddWin("SELEDITWORLD");
	
	AddTexture("inp_user", "assets/textures/inp_user");
	iUser.SetTex("inp_user");
	iUser.SetDim(-0.8,0.4,0.4,0.2);
	iUser.AddWin("LOGIN");
	iUser.text.Setup(iUser.x, iUser.y,false,20,font1,0.1);
	iUser.text.SetText("Emarioo");
	iUser.text.SetCol(0, 0, 0.9, 1);

	AddTexture("inp_key", "assets/textures/inp_key");
	iKey.SetTex("inp_key");
	iKey.SetDim(iUser.x,iUser.y-0.1-iUser.h,iUser.w,iUser.h);
	iKey.AddWin("LOGIN");
	iKey.text.Setup(iKey.x,iKey.y,false,20,font1,0.1);
	iKey.text.SetText("ak29t");
	iKey.text.SetCol(0.2, 0, 0.9, 1);

	AddTexture("but_login", "assets/textures/but_login");
	bLogin.SetTex("but_login");
	bLogin.SetDim(iKey.x,iKey.y-0.1-iKey.h, 0.3, 0.15);
	bLogin.AddWin("LOGIN");

	// Selection
	// Multi
	selMulti.SetTex(1,1,1,1);
	selMulti.SetDim(-0.9,0.7,0.4,0.2);
	selMulti.AddWin("SELECTION");
	selMulti.AddWin("SELADDSERVER");
	selMulti.AddWin("SELEDITSERVER");
	selMulti.AddWin("SELADDWORLD");
	selMulti.AddWin("SELEDITWORLD");

	selMultiBack.SetTex(1, 1, 1, 1);
	selMultiBack.SetDim(-0.9, -0.6, 0.5, 1);
	selMultiBack.AddWin("SELECTION");
	selMultiBack.AddWin("SELADDSERVER");
	selMultiBack.AddWin("SELEDITSERVER");
	selMultiBack.AddWin("SELADDWORLD");
	selMultiBack.AddWin("SELEDITWORLD");
	
	selMultiAdd.SetTex(1, 1, 1, 1);
	selMultiAdd.SetDim(-0.9, -0.9, 0.4, 0.2);
	selMultiAdd.AddWin("SELECTION");
	selMultiAdd.AddWin("SELADDSERVER");
	selMultiAdd.AddWin("SELEDITSERVER");
	selMultiAdd.AddWin("SELADDWORLD");
	selMultiAdd.AddWin("SELEDITWORLD");

	// Single
	/*
	// Mid
	selMidBack.SetTex(1, 1, 1, 1);
	selMidBack.SetDim(-0.6, 0.1, 0.3, 0.2);
	selMidBack.AddWin("SELECTION");

	selMidTop.SetTex(1, 1, 1, 1);
	selMidTop.SetDim(-0.6, 0.1, 0.3, 0.2);
	selMidTop.AddWin("SELECTION");

	selMidPass.SetTex(1, 1, 1, 1);
	selMidPass.SetDim(-0.6, 0.1, 0.3, 0.2);
	selMidPass.AddWin("SELECTION");

	selMidInfo.SetTex(1, 1, 1, 1);
	selMidInfo.SetDim(-0.6, 0.1, 0.3, 0.2);
	selMidInfo.AddWin("SELECTION");

	selMidJoin.SetTex(1, 1, 1, 1);
	selMidJoin.SetDim(-0.6, 0.1, 0.3, 0.2);
	selMidJoin.AddWin("SELECTION");

	selMidJoin2.SetTex(1, 1, 1, 1);
	selMidJoin2.SetDim(-0.6, 0.1, 0.3, 0.2);
	selMidJoin2.AddWin("SELECTION");

	selMidBot.SetTex(1, 1, 1, 1);
	selMidBot.SetDim(-0.6, 0.1, 0.3, 0.2);
	selMidBot.AddWin("SELECTION");
	*/

	// Load servers from text file
	//  Create buttons

	// Chat
	iChat.SetTex(0.4,0.4,0.4,0.4);
	iChat.SetDim(-0.95, -0.95, 0.5, 0.15);
	iChat.AddWin("GAMEPLAY");
	iChat.text.Setup(iChat.x, iChat.y, false, 60, font1, 0.1);
	iChat.text.SetText("");
	iChat.text.SetCol(1, 1, 1, 1);

	// Pause
	pauseFading.SetTex(0,0,0,0.3);
	pauseFading.SetDim(-1,-1,2,2);
	pauseFading.AddWin("ESCAPE");
	pauseFading.SetFade("GAMEPLAY", "ESCAPE",20);
	pauseFading.SetFade("ESCAPE", "GAMEPLAY",20);

	AddTexture("pause_settings", "assets/textures/pause_settings");
	pauseSettings.SetTex("pause_settings");
	pauseSettings.SetDim(-0.95,0.6, 0.3,0.3);
	pauseSettings.AddWin("ESCAPE");
	pauseSettings.SetFade("GAMEPLAY", "ESCAPE", 20);
	pauseSettings.SetFade("ESCAPE", "GAMEPLAY", 20);
	pauseSettings.SetText(10, font1, 0.1);
	pauseSettings.text.SetText("Settings");
	pauseSettings.text.SetCol(0.9, 0.9, 0.9, 1);

	//AddTexture("pause_quit", "assets/textures/pause_quit");
	pauseQuit.SetTex("pause_settings");
	pauseQuit.SetDim(pauseSettings.x,-0.9,pauseSettings.w,pauseSettings.h);
	pauseQuit.AddWin("ESCAPE");
	pauseQuit.SetFade("GAMEPLAY", "ESCAPE", 20);
	pauseQuit.SetFade("ESCAPE", "GAMEPLAY", 20);
	pauseQuit.SetText(10, font1, 0.1);
	pauseQuit.text.SetText("Quit");
	pauseQuit.text.SetCol(0.9, 0.9, 0.9, 1);

	//AddTexture("pause_leave", "assets/textures/pause_leave");
	pauseLeave.SetTex("pause_settings");
	pauseLeave.SetDim(pauseSettings.x, pauseQuit.y+pauseQuit.h+0.1, pauseSettings.w, pauseSettings.h);
	pauseLeave.AddWin("ESCAPE");
	pauseLeave.SetFade("GAMEPLAY", "ESCAPE", 20);
	pauseLeave.SetFade("ESCAPE", "GAMEPLAY", 20);
	pauseLeave.SetText(10, font1, 0.1);
	pauseLeave.text.SetText("Leave");
	pauseLeave.text.SetCol(0.9, 0.9, 0.9, 1);
}

// Rendering Controller
std::vector<GameObject*> texRender;
std::vector<GameObject*> colorRender;
void AddRenderO(std::string s,GameObject* o) {
	if (s=="tex") {
		texRender.push_back(o);
	}else if (s == "color") {
		colorRender.push_back(o);
	}
}
void DelRenderO(std::string s,GameObject* o) {
	if (s == "tex") {
		for (int i = 0; i < texRender.size(); i++) {
			if (texRender[i] == o) {
				texRender.erase(texRender.begin() + i);
				break;
			}
		}
	} else if (s == "color") {
		for (int i = 0; i < colorRender.size(); i++) {
			if (colorRender[i] == o) {
				colorRender.erase(colorRender.begin() + i);
				break;
			}
		}
	}
}
void ClearRender(std::string s) {
	if (s == "tex") {
		texRender.clear();
	} else if (s == "color") {
		colorRender.clear();
	}
}
void UpdateVisual() {
}
/*
Runs glfwSwapBuffers at the end
*/
void DrawVisual(Dimension* dim) {
	RenderClearScreen(0.1f, 0.1f, 0.2f, 1);
	// Game
	if (RenderGame) {
		SwitchBlendDepth(false);
		BindShader("tex");
		for (GameObject* o : texRender) {
			o->Draw();
		}
		BindShader("color");
		for (GameObject* o : colorRender) {
			o->Draw();
		}
	}

	// Gui
	SwitchBlendDepth(true);
	BindShader("gui");

	if (chatMode) {
		iChat.Draw();
	}
	if (iChat.iwin.AtWin()) {
		if (chatActive > 0)
			chatActive--;
		if (chatMode || chatActive > 0) {
			for (int i = 0; i < chatMessages.size(); i++) {
				chatMessages[i].DrawString();
			}
		}
	}
	// Menu
	sBack.Draw();
	
	iUser.Draw();
	iKey.Draw();
	bLogin.Draw();

	// Selection
	selMulti.Draw();
	selMultiBack.Draw();
	selMultiAdd.Draw();
	/*
	selMidBack.Draw();
	selMidTop.Draw();
	selMidPass.Draw();
	selMidInfo.Draw();
	selMidJoin.Draw();
	selMidJoin2.Draw();
	selMidBot.Draw();
	*/
	// Pause
	pauseFading.Draw();
	pauseSettings.Draw();
	pauseLeave.Draw();
	pauseQuit.Draw();
	
	glfwSwapBuffers(GetWindow());
}